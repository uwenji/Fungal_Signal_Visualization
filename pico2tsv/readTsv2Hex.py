from dash import Dash, dcc, html, Input, Output
import plotly.express as px
import pandas as pd
import numpy as np
from datalog.adc.adc import Adc
from datalog.adc.config import AdcConfig
from datalog.data import DataStore
import plotly.graph_objects as go
from jupyter_dash import JupyterDash
# ==== util
def Distance(from_x, from_y, to_x, to_y):
    return np.sqrt(np.power(to_x - from_x,2) + np.power(to_y - from_y,2))

def Rgb2Hex(r, g, b):
    return '#'+('{:02X}{:02X}{:02X}').format(r, g, b)

def Remap(value, min, max, v_default):
    newV = (value - v_default)
    if(value > v_default+min and value < v_default+max):
        return float(newV - min)/float(max-min)
    elif(value <= v_default+min ):
        return 0.0
    else:
        return 1.0

def Rotate(l, n):
    return l[n:] + l[:n]

def ColorGradient(value, colorA, colorB, colorC):
    if(value<=0.5):
        value = value*2
        red = int((colorB['R'] - colorA['R'])*value + colorA['R'])
        green = int((colorB['G'] - colorA['G'])*value + colorA['G'])
        blue = int((colorB['B'] - colorA['B'])*value + colorA['B'])
    else:
        value = (value-0.5)*2
        red = int((colorC['R'] - colorB['R'])*value + colorB['R'])
        green = int((colorC['G'] - colorB['G'])*value + colorB['G'])
        blue = int((colorC['B'] - colorB['B'])*value + colorB['B'])
    return  {'R':red, 'G':green, 'B':blue}

csvPath = '/Users/jyou/Desktop/Fungal_Signal_Visualization/pico2tsv/example_2.csv'
# ==== browing graphic
x_tri_grid = [
        [-6.35782896551973E-07,8.23608207702637],
        [-6.35782896551973E-07,4.11804103851318],
        [-6.35782896551973E-07,-4.1180419921875],
        [-6.35782896551973E-07,-8.236083984375],
        [-6.35782896551973E-07,-4.1180419921875],
        [-6.35782896551973E-07,4.11804103851318],
        [8.23608207702637,4.11804103851318],
        [8.23608207702637,12.3541240692139],
        [8.23608207702637,16.4721660614014],
        [8.23608207702637,12.3541240692139],
        [-4.1180419921875,4.11804103851318],
        [4.11804103851318,-3.17891448275986E-07],
        [4.11804103851318,8.23608303070068],
        [4.11804103851318,12.3541240692139],
        [8.23608207702637,4.11804103851318],
        [-4.1180419921875,-3.17891448275986E-07],
        [-4.1180419921875,-8.23608303070068],
        [-4.1180419921875,-12.3541240692139],
        [-8.236083984375,-4.1180419921875],
        [-8.236083984375,-12.3541240692139],
        [-8.236083984375,-16.4721660614014],
        [-8.236083984375,-12.3541240692139],
        [-4.1180419921875,-8.236083984375],
        [-4.1180419921875,-12.3541240692139],
        [-4.1180419921875,-8.23608303070068],
        [-4.1180419921875,-3.17891448275986E-07],
        [4.11804103851318,-4.1180419921875],
        [4.11804103851318,-3.17891448275986E-07],
        [4.11804103851318,8.23608303070068],
        [4.11804103851318,12.3541240692139],
        [16.4721660614014,20.5902080535889],
        [16.4721660614014,12.3541240692139],
        [12.3541240692139,20.5902080535889],
        [12.3541240692139,16.4721660614014],
        [12.3541240692139,8.23608303070068],
        [16.4721660614014,24.7082481384277],
        [16.4721660614014,20.5902080535889],
        [16.4721660614014,12.3541240692139],
        [12.3541240692139,20.5902080535889],
        [12.3541240692139,16.4721660614014],
        [8.23608303070068,12.3541240692139],
        [8.23608303070068,16.4721660614014],
        [8.23608303070068,12.3541240692139],
        [8.23608303070068,4.11804151535034],
        [-3.17891448275986E-07,8.23608303070068],
        [-3.17891448275986E-07,4.11804151535034],
        [-3.17891448275986E-07,-4.11804151535034],
        [-8.23608303070068,-3.17891448275986E-07],
        [-8.23608303070068,-4.11804151535034],
        [-8.23608303070068,-12.3541240692139],
        [-8.23608303070068,-16.4721660614014],
        [-12.3541240692139,-8.23608303070068],
        [-12.3541240692139,-16.4721660614014],
        [-12.3541240692139,-20.5902080535889],
        [-16.4721660614014,-12.3541240692139],
        [-16.4721660614014,-20.5902080535889],
        [-16.4721660614014,-24.7082481384277],
        [-16.4721660614014,-20.5902080535889],
        [-12.3541240692139,-16.4721660614014],
        [-12.3541240692139,-20.5902080535889],
        [-12.3541240692139,-16.4721660614014],
        [-8.23608303070068,-12.3541240692139],
        [-8.23608303070068,-16.4721660614014],
        [-8.23608303070068,-12.3541240692139],
        [-8.23608303070068,-4.11804151535034],
        [-3.17891448275986E-07,-8.23608303070068],
        [-3.17891448275986E-07,-4.11804151535034],
        [-3.17891448275986E-07,4.11804151535034],
        [8.23608303070068,-3.17891448275986E-07],
        [8.23608303070068,4.11804151535034],
        [8.23608303070068,12.3541240692139],
        [8.23608303070068,16.4721660614014],
        [16.4721660614014,12.3541240692139],
        [16.4721660614014,20.5902061462402],
        [16.4721660614014,24.7082481384277],
        [20.5902080535889,16.4721660614014],
        [20.5902080535889,24.7082481384277],
        [20.5902080535889,28.8262901306152],
        [24.7082481384277,20.5902080535889],
        [24.7082481384277,28.8262901306152],
        [24.7082481384277,32.9443321228027],
        [24.7082481384277,28.8262901306152],
        [24.7082481384277,20.5902080535889],
        [20.5902080535889,28.8262901306152],
        [20.5902080535889,24.7082481384277],
        [16.4721660614014,20.5902080535889],
        [16.4721660614014,24.7082481384277],
        [16.4721660614014,20.5902061462402],
        [12.3541240692139,16.4721660614014],
        [12.3541240692139,20.5902061462402],
        [12.3541240692139,16.4721660614014],
        [12.3541240692139,8.23608207702637],
        [4.11804151535034,12.3541240692139],
        [4.11804151535034,8.23608207702637],
        [4.11804151535034,0],
        [-4.11804151535034,4.11804151535034],
        [-4.11804151535034,0],
        [-4.11804151535034,-8.23608207702637],
        [-12.3541240692139,-4.11804151535034],
        [-12.3541240692139,-8.23608207702637],
        [-12.3541240692139,-16.4721660614014],
        [-12.3541240692139,-20.5902061462402],
        [-16.4721660614014,-12.3541240692139],
        [-16.4721660614014,-20.5902061462402],
        [-16.4721660614014,-24.7082481384277],
        [-20.5902080535889,-16.4721660614014],
        [-20.5902080535889,-24.7082481384277],
        [-20.5902080535889,-28.8262901306152],
        [-24.7082481384277,-20.5902080535889],
        [-24.7082481384277,-28.8262901306152],
        [-24.7082481384277,-32.9443321228027],
        [-24.7082481384277,-28.8262901306152],
        [-20.5902080535889,-24.7082481384277],
        [-20.5902080535889,-28.8262901306152],
        [-20.5902080535889,-24.7082481384277],
        [-16.4721660614014,-20.5902080535889],
        [-16.4721660614014,-24.7082481384277],
        [-16.4721660614014,-20.5902061462402],
        [-12.3541240692139,-16.4721660614014],
        [-12.3541240692139,-20.5902061462402],
        [-12.3541240692139,-16.4721660614014],
        [-12.3541240692139,-8.23608207702637],
        [-4.11804151535034,-12.3541240692139],
        [-4.11804151535034,-8.23608207702637],
        [-4.11804151535034,0],
        [4.11804151535034,-4.11804151535034],
        [4.11804151535034,0],
        [4.11804151535034,8.23608207702637],
        [12.3541240692139,4.11804151535034],
        [12.3541240692139,8.23608207702637],
        [12.3541240692139,16.4721660614014],
        [12.3541240692139,20.5902061462402],
        [24.7082481384277,20.5902061462402],
        [28.8262901306152,24.7082481384277],
        [32.9443321228027,28.8262901306152],
        [32.9443321228027,28.8262901306152],
        [24.7082481384277,28.8262901306152],
        [20.5902061462402,24.7082481384277],
        [16.4721660614014,20.5902061462402],
        [8.23608207702637,16.4721660614014],
        [0,8.23608207702637],
        [-8.23608207702637,0],
        [-16.4721660614014,-8.23608207702637],
        [-20.5902061462402,-16.4721660614014],
        [-24.7082481384277,-20.5902061462402],
        [-28.8262901306152,-24.7082481384277],
        [-32.9443321228027,-28.8262901306152],
        [-28.8262901306152,-32.9443321228027],
        [-24.7082481384277,-28.8262901306152],
        [-20.5902061462402,-24.7082481384277],
        [-16.4721660614014,-20.5902061462402],
        [-8.23608207702637,-16.4721660614014],
        [0,-8.23608207702637],
        [8.23608207702637,0],
        [16.4721660614014,8.23608207702637],
        [20.5902061462402,16.4721660614014]
        ]
y_tri_grid = [
        [0,1.45716771982052E-16],
        [0,-7.13265705108643],
        [0,-7.13265705108643],
        [0,1.15532583500055E-15],
        [0,7.13265705108643],
        [0,7.13265705108643],
        [1.45716771982052E-16,7.13265705108643],
        [1.45716771982052E-16,7.13265705108643],
        [1.45716771982052E-16,2.91433543964104E-16],
        [1.45716771982052E-16,-7.13265705108643],
        [-7.13265705108643,-7.13265705108643],
        [-7.13265705108643,-14.2653141021729],
        [-7.13265705108643,-14.2653141021729],
        [-7.13265705108643,-7.13265705108643],
        [1.45716771982052E-16,-7.13265705108643],
        [-7.13265705108643,-14.2653141021729],
        [-7.13265705108643,-14.2653141021729],
        [-7.13265705108643,-7.13265705108643],
        [1.15532583500055E-15,-7.13265705108643],
        [1.15532583500055E-15,-7.13265705108643],
        [1.15532583500055E-15,2.31065167000111E-15],
        [1.15532583500055E-15,7.13265705108643],
        [7.13265705108643,1.15532583500055E-15],
        [7.13265705108643,7.13265705108643],
        [7.13265705108643,14.2653141021729],
        [7.13265705108643,14.2653141021729],
        [7.13265705108643,7.13265705108643],
        [7.13265705108643,14.2653141021729],
        [7.13265705108643,14.2653141021729],
        [7.13265705108643,7.13265705108643],
        [2.91433543964104E-16,7.13265705108643],
        [2.91433543964104E-16,7.13265705108643],
        [7.13265705108643,7.13265705108643],
        [7.13265705108643,14.2653141021729],
        [7.13265705108643,14.2653141021729],
        [2.91433543964104E-16,4.37150315946155E-16],
        [2.91433543964104E-16,-7.13265705108643],
        [2.91433543964104E-16,-7.13265705108643],
        [-7.13265705108643,-7.13265705108643],
        [-7.13265705108643,-14.2653141021729],
        [-14.2653141021729,-7.13265705108643],
        [-14.2653141021729,-14.2653141021729],
        [-14.2653141021729,-21.3979721069336],
        [-14.2653141021729,-21.3979721069336],
        [-14.2653141021729,-14.2653141021729],
        [-14.2653141021729,-21.3979721069336],
        [-14.2653141021729,-21.3979721069336],
        [-14.2653141021729,-14.2653141021729],
        [-14.2653141021729,-21.3979721069336],
        [-14.2653141021729,-21.3979721069336],
        [-14.2653141021729,-14.2653141021729],
        [-7.13265705108643,-14.2653141021729],
        [-7.13265705108643,-14.2653141021729],
        [-7.13265705108643,-7.13265705108643],
        [2.31065167000111E-15,-7.13265705108643],
        [2.31065167000111E-15,-7.13265705108643],
        [2.31065167000111E-15,3.46597750500166E-15],
        [2.31065167000111E-15,7.13265705108643],
        [7.13265705108643,2.31065167000111E-15],
        [7.13265705108643,7.13265705108643],
        [7.13265705108643,14.2653141021729],
        [14.2653141021729,7.13265705108643],
        [14.2653141021729,14.2653141021729],
        [14.2653141021729,21.3979721069336],
        [14.2653141021729,21.3979721069336],
        [14.2653141021729,14.2653141021729],
        [14.2653141021729,21.3979721069336],
        [14.2653141021729,21.3979721069336],
        [14.2653141021729,14.2653141021729],
        [14.2653141021729,21.3979721069336],
        [14.2653141021729,21.3979721069336],
        [14.2653141021729,14.2653141021729],
        [14.2653141021729,21.3979721069336],
        [14.2653141021729,21.3979721069336],
        [14.2653141021729,14.2653141021729],
        [7.13265705108643,14.2653141021729],
        [7.13265705108643,14.2653141021729],
        [7.13265705108643,7.13265705108643],
        [4.37150315946155E-16,7.13265705108643],
        [4.37150315946155E-16,7.13265705108643],
        [4.37150315946155E-16,5.82867087928207E-16],
        [4.37150315946155E-16,-7.13265705108643],
        [4.37150315946155E-16,-7.13265705108643],
        [-7.13265705108643,-7.13265705108643],
        [-7.13265705108643,-14.2653141021729],
        [-14.2653141021729,-7.13265705108643],
        [-14.2653141021729,-14.2653141021729],
        [-14.2653141021729,-21.3979721069336],
        [-21.3979721069336,-14.2653141021729],
        [-21.3979721069336,-21.3979721069336],
        [-21.3979721069336,-28.5306282043457],
        [-21.3979721069336,-28.5306282043457],
        [-21.3979721069336,-21.3979721069336],
        [-21.3979721069336,-28.5306282043457],
        [-21.3979721069336,-28.5306282043457],
        [-21.3979721069336,-21.3979721069336],
        [-21.3979721069336,-28.5306282043457],
        [-21.3979721069336,-28.5306282043457],
        [-21.3979721069336,-21.3979721069336],
        [-21.3979721069336,-28.5306282043457],
        [-21.3979721069336,-28.5306282043457],
        [-21.3979721069336,-21.3979721069336],
        [-14.2653141021729,-21.3979721069336],
        [-14.2653141021729,-21.3979721069336],
        [-14.2653141021729,-14.2653141021729],
        [-7.13265705108643,-14.2653141021729],
        [-7.13265705108643,-14.2653141021729],
        [-7.13265705108643,-7.13265705108643],
        [3.46597750500166E-15,-7.13265705108643],
        [3.46597750500166E-15,-7.13265705108643],
        [3.46597750500166E-15,4.62130334000221E-15],
        [3.46597750500166E-15,7.13265705108643],
        [7.13265705108643,3.46597750500166E-15],
        [7.13265705108643,7.13265705108643],
        [7.13265705108643,14.2653141021729],
        [14.2653141021729,7.13265705108643],
        [14.2653141021729,14.2653141021729],
        [14.2653141021729,21.3979721069336],
        [21.3979721069336,14.2653141021729],
        [21.3979721069336,21.3979721069336],
        [21.3979721069336,28.5306282043457],
        [21.3979721069336,28.5306282043457],
        [21.3979721069336,21.3979721069336],
        [21.3979721069336,28.5306282043457],
        [21.3979721069336,28.5306282043457],
        [21.3979721069336,21.3979721069336],
        [21.3979721069336,28.5306282043457],
        [21.3979721069336,28.5306282043457],
        [21.3979721069336,21.3979721069336],
        [21.3979721069336,28.5306282043457],
        [21.3979721069336,28.5306282043457],
        [21.3979721069336,21.3979721069336],
        [14.2653141021729,21.3979721069336],
        [7.13265705108643,14.2653141021729],
        [5.82867087928207E-16,7.13265705108643],
        [5.82867087928207E-16,-7.13265705108643],
        [-14.2653141021729,-7.13265705108643],
        [-21.3979721069336,-14.2653141021729],
        [-28.5306282043457,-21.3979721069336],
        [-28.5306282043457,-28.5306282043457],
        [-28.5306282043457,-28.5306282043457],
        [-28.5306282043457,-28.5306282043457],
        [-28.5306282043457,-28.5306282043457],
        [-21.3979721069336,-28.5306282043457],
        [-14.2653141021729,-21.3979721069336],
        [-7.13265705108643,-14.2653141021729],
        [4.62130334000221E-15,-7.13265705108643],
        [7.13265705108643,4.62130334000221E-15],
        [14.2653141021729,7.13265705108643],
        [21.3979721069336,14.2653141021729],
        [28.5306282043457,21.3979721069336],
        [28.5306282043457,28.5306282043457],
        [28.5306282043457,28.5306282043457],
        [28.5306282043457,28.5306282043457],
        [28.5306282043457,28.5306282043457],
        [21.3979721069336,28.5306282043457]
        ]
mid_points = [
        (4.11804072062, 7.2858385991e-17),
        (2.05902020137, -3.56632852554),
        (-2.05902131399, -3.56632852554),
        (-4.11804231008, 5.776629175e-16),
        (-2.05902131399, 3.56632852554),
        (2.05902020137, 3.56632852554),
        (6.17706155777, 3.56632852554),
        (10.2951030731, 3.56632852554),
        (12.3541240692, 2.18575157973e-16),
        (10.2951030731, -3.56632852554),
        (-4.76837158203e-07, -7.13265705109),
        (2.05902036031, -10.6989855766),
        (6.17706203461, -10.6989855766),
        (8.23608255386, -7.13265705109),
        (6.17706155777, -3.56632852554),
        (-2.05902115504, -10.6989855766),
        (-6.17706251144, -10.6989855766),
        (-8.23608303070, -7.13265705109),
        (-6.17706298828, -3.56632852554),
        (-10.2951040268, -3.56632852554),
        (-12.3541250229, 1.7329887525e-15),
        (-10.2951040268, 3.56632852554),
        (-6.17706298828, 3.56632852554),
        (-8.23608303070, 7.13265705109),
        (-6.17706251144, 10.6989855766),
        (-2.05902115504, 10.6989855766),
        (-4.76837158203e-07, 7.13265705109),
        (2.05902036031, 10.6989855766),
        (6.17706203461, 10.6989855766),
        (8.23608255386, 7.13265705109),
        (18.5311870575, 3.56632852554),
        (14.4131450653, 3.56632852554),
        (16.4721660614, 7.13265705109),
        (14.4131450653, 10.6989855766),
        (10.2951035500, 10.6989855766),
        (20.5902070999, 3.64291929955e-16),
        (18.5311870575, -3.56632852554),
        (14.4131450653, -3.56632852554),
        (16.4721660614, -7.13265705109),
        (14.4131450653, -10.6989855766),
        (10.2951035500, -10.6989855766),
        (12.3541245461, -14.2653141022),
        (10.2951035500, -17.8316431046),
        (6.17706227303, -17.8316431046),
        (4.11804135640, -14.2653141022),
        (2.05902059873, -17.8316431046),
        (-2.05902091662, -17.8316431046),
        (-4.11804167430, -14.2653141022),
        (-6.17706227303, -17.8316431046),
        (-10.2951035500, -17.8316431046),
        (-12.3541245461, -14.2653141022),
        (-10.2951035500, -10.6989855766),
        (-14.4131450653, -10.6989855766),
        (-16.4721660614, -7.13265705109),
        (-14.4131450653, -3.56632852554),
        (-18.5311870575, -3.56632852554),
        (-20.5902070999, 2.8883145875e-15),
        (-18.5311870575, 3.56632852554),
        (-14.4131450653, 3.56632852554),
        (-16.4721660614, 7.13265705109),
        (-14.4131450653, 10.6989855766),
        (-10.2951035500, 10.6989855766),
        (-12.3541245461, 14.2653141022),
        (-10.2951035500, 17.8316431046),
        (-6.17706227303, 17.8316431046),
        (-4.11804167430, 14.2653141022),
        (-2.05902091662, 17.8316431046),
        (2.05902059873, 17.8316431046),
        (4.11804135640, 14.2653141022),
        (6.17706227303, 17.8316431046),
        (10.2951035500, 17.8316431046),
        (12.3541245461, 14.2653141022),
        (14.4131450653, 17.8316431046),
        (18.5311861038, 17.8316431046),
        (20.5902070999, 14.2653141022),
        (18.5311870575, 10.6989855766),
        (22.6492280960, 10.6989855766),
        (24.7082490921, 7.13265705109),
        (22.6492280960, 3.56632852554),
        (26.7672691345, 3.56632852554),
        (28.8262901306, 5.10008701937e-16),
        (26.7672691345, -3.56632852554),
        (22.6492280960, -3.56632852554),
        (24.7082490921, -7.13265705109),
        (22.6492280960, -10.6989855766),
        (18.5311870575, -10.6989855766),
        (20.5902070999, -14.2653141022),
        (18.5311861038, -17.8316431046),
        (14.4131450653, -17.8316431046),
        (16.4721651077, -21.3979721069),
        (14.4131450653, -24.9643001556),
        (10.2951030731, -24.9643001556),
        (8.23608279228, -21.3979721069),
        (6.17706179619, -24.9643001556),
        (2.05902075768, -24.9643001556),
        (0.0, -21.3979721069),
        (-2.05902075768, -24.9643001556),
        (-6.17706179619, -24.9643001556),
        (-8.23608279228, -21.3979721069),
        (-10.2951030731, -24.9643001556),
        (-14.4131450653, -24.9643001556),
        (-16.4721651077, -21.3979721069),
        (-14.4131450653, -17.8316431046),
        (-18.5311861038, -17.8316431046),
        (-20.5902070999, -14.2653141022),
        (-18.5311870575, -10.6989855766),
        (-22.6492280960, -10.6989855766),
        (-24.7082490921, -7.13265705109),
        (-22.6492280960, -3.56632852554),
        (-26.7672691345, -3.56632852554),
        (-28.8262901306, 4.0436404225e-15),
        (-26.7672691345, 3.56632852554),
        (-22.6492280960, 3.56632852554),
        (-24.7082490921, 7.13265705109),
        (-22.6492280960, 10.6989855766),
        (-18.5311870575, 10.6989855766),
        (-20.5902070999, 14.2653141022),
        (-18.5311861038, 17.8316431046),
        (-14.4131450653, 17.8316431046),
        (-16.4721651077, 21.3979721069),
        (-14.4131450653, 24.9643001556),
        (-10.2951030731, 24.9643001556),
        (-8.23608279228, 21.3979721069),
        (-6.17706179619, 24.9643001556),
        (-2.05902075768, 24.9643001556),
        (0.0, 21.3979721069),
        (2.05902075768, 24.9643001556),
        (6.17706179619, 24.9643001556),
        (8.23608279228, 21.3979721069),
        (10.2951030731, 24.9643001556),
        (14.4131450653, 24.9643001556),
        (16.4721651077, 21.3979721069),
        (22.6492271423, 17.8316431046),
        (26.7672691345, 10.6989855766),
        (30.8853111267, 3.56632852554),
        (30.8853111267, -3.56632852554),
        (26.7672691345, -10.6989855766),
        (22.6492271423, -17.8316431046),
        (18.5311861038, -24.9643001556),
        (12.3541240692, -28.5306282043),
        (4.11804103851, -28.5306282043),
        (-4.11804103851, -28.5306282043),
        (-12.3541240692, -28.5306282043),
        (-18.5311861038, -24.9643001556),
        (-22.6492271423, -17.8316431046),
        (-26.7672691345, -10.6989855766),
        (-30.8853111267, -3.56632852554),
        (-30.8853111267, 3.56632852554),
        (-26.7672691345, 10.6989855766),
        (-22.6492271423, 17.8316431046),
        (-18.5311861038, 24.9643001556),
        (-12.3541240692, 28.5306282043),
        (-4.11804103851, 28.5306282043),
        (4.11804103851, 28.5306282043),
        (12.3541240692, 28.5306282043),
        (18.5311861038, 24.9643001556)
        ]
        
app = JupyterDash(__name__)

app.layout = html.Div([
    html.H1("Streaming of Picolog data"),
            dcc.Interval(
            id='interval-component',
            interval=1*500, # in milliseconds
            n_intervals=0
        ),
    dcc.Graph(
        id='hexGrid',
        style={'width': '900px', 'height': '800px'}),
    dcc.Graph(id="graphB"),
    dcc.Graph(id="graphA"),
])

rotate_count = 0
moving = 0
@app.callback(
    Output('hexGrid', 'figure'),
    [Input('interval-component', "n_intervals")]
)
def update_hexColor(n_clicls):
    # ColorA = {'R':204, 'G':102, 'B':153}
    ColorA = {'R':246, 'G':134, 'B':0}
    # ColorB = {'R':255, 'G':184, 'B':77}
    ColorB = {'R':0, 'G':212, 'B':255}
    # ColorC = {'R':0, 'G':229, 'B':255}
    ColorC = {'R':170, 'G':12, 'B':155}
    global moving, csvPath
    PicoDefault = 7700
    
    # moving source
    # Location = (x_tri_grid[moving][0],y_tri_grid[moving][0])
    # moving+=1; moving = moving%156
    Location = (21,21)
    arr = np.random.uniform(-2,2,size=(1,2))
    Location = (Location[0]+ arr[0,0], Location[1]+ arr[0,1])
    # if(np.abs(Location[0]))
    # read from csv
    df = pd.read_csv(csvPath) # replace with your own data source
    pico24 = [] #len = step count
    timerange = 180
    refValue = df.iat[1,2]
    for i in range(len(df['channel1'])-timerange,len(df['channel1']),1):
        if(refValue!=df.iat[i,2]):
            num = df.iat[i,2]
            pico24.append(Remap(num, -100,100, PicoDefault))
            refValue = num

    # set grid info
    hexDict = [] #grid
    maxDistance = 0.0
    for i in range(len(mid_points)):
        #the point(x, y) => x is point[0], y is point[1]
        #dict structure is {distance, }
        value = Distance(Location[0], Location[1], mid_points[i][0], mid_points[i][1])
        if(maxDistance < value):
            maxDistance = value
            ########
        eachDict = {
            "id": i,
            "dictance":value,
            "color": "#0066ff",
            }
        hexDict.append(eachDict)
    
    # find the range
    rangeSet = []
    step = len(pico24)
    for i in range(step):
        v = maxDistance*(float(i)/float(step))
        rangeSet.append(v)
    color2csv = []
    
    global rotate_count
    rotate_count = rotate_count%len(pico24)
    rotate_count += 1
    
    pico = Rotate( pico24, rotate_count)
    # print(pico)
    for strip in hexDict:
        group = 0
        for i in range(0, step):
            if rangeSet[i] < (maxDistance-strip["dictance"]):
                group = i
        #remap value
        color = ColorGradient(pico[group], ColorA, ColorB, ColorC)
        color2csv.append(color)
        #hex = matplotlib.colors.to_hex([ 0.47, 0.0, 1.0, 0.5 ], keep_alpha=True)
        hex = Rgb2Hex(color['R'], color['G'], color['B'])
        strip["color"] = hex
    # print(cluster)
    # print('------------------------------')
    hexFig = go.Figure()   
    for i in range(0,156,1):
        #the color 
        rgba = hexDict[i]["color"]
        hexFig.add_trace(go.Scatter(
            x=x_tri_grid[i],
            y=y_tri_grid[i],
            line_color=rgba,
            showlegend=False
        ))
    colorFrame = pd.DataFrame(color2csv)
    colorFrame.to_csv('/Users/jyou/Desktop/Fungal_Signal_Visualization/pico2tsv/hexColors.csv')
    
    hexFig.update_traces(hoverinfo='text+name', mode='lines+markers')
    hexFig.update_layout(legend=dict(y=0.5, traceorder='reversed', font_size=16))
    return hexFig


@app.callback(
    Output('graphA', 'figure'),
    [Input('interval-component', "n_intervals")]
)
def display_graph(n_clicks):
    global csvPath
    df = pd.read_csv(csvPath) # replace with your own data source
    refValue = df.iat[1,2]
    pico24 = []
    timerange = 180
    for i in range(len(df['channel1'])-180,len(df['channel1']),1):
        #=SQRT(B - SQRT(A))/1000
        # num = (df.iat[i,2] - df.iat[i-1,2])
        num = df.iat[i,2]
        if(refValue!=num):
            refValue=num
            pico24.append(num)
        # pico24.append(np.sqrt(np.sqrt(df.iat[i,1]) - np.sqrt(df.iat[i,0]))/1000)
    newDf = pd.DataFrame(pico24)
    # print(newDf)
    fig = px.line(newDf)
    return fig
@app.callback(
    Output('graphB', 'figure'),
    [Input('interval-component', "n_intervals")]
)
def display_graph(n_clicks):
    global csvPath
    df = pd.read_csv(csvPath) # replace with your own data source
    refValue = df.iat[1,2]
    pico24 = []
    for i in range(1,len(df['channel1'])-1,1):
        #=SQRT(B - SQRT(A))/1000
        # num = (df.iat[i,2] - df.iat[i-1,2])
        num = df.iat[i,2]
        if(refValue!=num):
            refValue=num
            pico24.append(num)
        # pico24.append(np.sqrt(np.sqrt(df.iat[i,1]) - np.sqrt(df.iat[i,0]))/1000)
    newDf = pd.DataFrame(pico24)
    # print(newDf)
    fig = px.line(newDf)
    return fig
app.run_server(mode='external', port = 8069, dev_tools_ui=True, #debug=True,
            dev_tools_hot_reload =True, threaded=True)